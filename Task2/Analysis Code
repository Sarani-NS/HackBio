# Load necessary libraries
library(dplyr)
library(data.table)

data <- read.delim("C:/Users/sante/Desktop/WHO_AMR_PRODUCTS_DATA.tsv",sep="\t")
data

summary(data)

# Obtain unique values for each column
unique_values <- lapply(data, unique)

# Print unique values for each column
print(unique_values)

# I gave up on it, should fix it

# Step 1: Add "01 " at the start of each value in the Date.of.update column
#data$Date.of.update <- paste0("01 ", data$Date.of.update)

# Step 2: Convert the updated Date.of.update column to Date format
# The format is day (%d), abbreviated month (%b), and two-digit year (%y)
# data$Date.of.update <- as.Date(data$Date.of.update, format = "%d %b %y")

# Create a new column by combining Product.name and Non.traditionals.categories
data$Combined.Categories <- ifelse(is.na(data$Non.traditionals.categories),
                                    data$Product.name,
                                    data$Non.traditionals.categories)

# Replace "NA" values in Combined.Categories with "Antibiotics"
data$Combined.Categories[is.na(data$Combined.Categories)] <- "Antibiotics"

# Remove the old columns
data$Product.name <- NULL
data$Non.traditionals.categories <- NULL

# Function to get the type of each unique value in a column
get_unique_value_types <- function(column) {
  unique_values <- unique(column)
  value_types <- sapply(unique_values, function(x) class(x))
  return(value_types)
}

# Apply the function to each column
unique_value_types <- lapply(data, get_unique_value_types)

# Print the types of unique values for each column
for (col_name in names(unique_value_types)) {
  cat("\nColumn:", col_name, "\n")
  print(unique_value_types[[col_name]])
}

# Find duplicate rows
duplicates <- data[duplicated(data), ]

# Remove duplicate rows
data <- data[!duplicated(data), ]

# Function to replace specific values with standardized values
standardize_values <- function(column) {
  column <- as.character(column)  # Ensure the column is treated as character type
  column <- ifelse(column %in% c("y"), "Yes", column)
  column <- ifelse(column %in% c("-", "â€”"), "None", column)
  column <- ifelse(column %in% c("?"), "Unknown", column)
  column <- ifelse(column %in% c("N/A"), NA, column)
  
  return(column)
}

# Replace empty strings with NA
data[data == ""] <- NA

# Apply the standardization function to all columns
data <- data %>% mutate(across(everything(), standardize_values))

# Check updated data
print(data)

# Function to replace NA with a specified value
replace_na_na_with_value <- function(column, replacement) {
  column <- ifelse(column %in% c(NA), replacement, column)
  return(column)
}

# Handling missing values for each column:

# 1. Alternative name
data$Alternative.name <- replace_na_na_with_value(data$Alternative.name, "None")

# 2. Pathogen.activity
data$Pathogen.activity <- replace_na_na_with_value(data$Pathogen.activity, "Other priority pathogens")

# 3. Active.against.priority.pathogens.
data$Active.against.priority.pathogens. <- replace_na_na_with_value(data$Active.against.priority.pathogens., "No")

# 4. Innovative.
data$Innovative. <- replace_na_na_with_value(data$Innovative., "No")

# 5. NCE.
data$NCE. <- replace_na_na_with_value(data$NCE., "No")

# 6. Mycobacterium.tuberculosis
data$Mycobacterium.tuberculosis <- replace_na_na_with_value(data$Mycobacterium.tuberculosis, "No")

# 7. Clostridioides.difficile
data$Clostridioides.difficile <- replace_na_na_with_value(data$Clostridioides.difficile, "Unknown")

# Check updated data
print(data)

# Write cleaned data in a new .tsv file
fwrite(data, file = "cleaned_data.tsv", sep = "\t")

data_cleaned <- read.delim("C:/Users/sante/Desktop/cleaned_data.tsv",sep="\t")
data_cleaned
